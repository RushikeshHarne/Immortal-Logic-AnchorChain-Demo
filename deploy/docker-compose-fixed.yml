version: '3.8'

services:
  # Local blockchain (Anvil)
  anvil:
    build:
      context: .
      dockerfile: Dockerfile.anvil
    ports:
      - "8545:8545"
    networks:
      - anchorchain
    profiles:
      - local
    environment:
      - FOUNDRY_DISABLE_NIGHTLY_WARNING=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Contract deployer
  deployer:
    build:
      context: .
      dockerfile: Dockerfile.deployer
    volumes:
      - anchor_data:/shared/anchor
    environment:
      - RPC_URL=${RPC_URL:-http://anvil:8545}
      - PRIVATE_KEY=${PRIVATE_KEY:-0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80}
      - CHAIN_ID=${CHAIN_ID:-31337}
    depends_on:
      anvil:
        condition: service_healthy
    networks:
      - anchorchain
    profiles:
      - local
    restart: "no"

  # Testnet deployer
  deployer-testnet:
    build:
      context: .
      dockerfile: Dockerfile.deployer
    volumes:
      - anchor_data:/shared/anchor
    environment:
      - RPC_URL=${RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - CHAIN_ID=${CHAIN_ID}
    networks:
      - anchorchain
    profiles:
      - testnet
    restart: "no"

  # AnchorChain API (Local)
  anchorchain-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8080:8000"  # Fixed port mapping
    volumes:
      - anchor_data:/shared/anchor
    environment:
      - RPC_URL=${RPC_URL:-http://anvil:8545}
      - API_TOKEN=${API_TOKEN:-demo-token-123}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
    depends_on:
      - deployer
    networks:
      - anchorchain
    profiles:
      - local

  # AnchorChain API (Testnet)
  anchorchain-api-testnet:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8081:8000"  # Fixed port conflict
    volumes:
      - anchor_data:/shared/anchor
    environment:
      - RPC_URL=${RPC_URL}
      - API_TOKEN=${API_TOKEN:-demo-token-123}
      - HOST=${HOST:-0.0.0.0}  # Fixed host binding
      - PORT=${PORT:-8000}
    depends_on:
      - deployer-testnet
    networks:
      - anchorchain
    profiles:
      - testnet

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - anchorchain
    profiles:
      - local
      - testnet
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro  # Fixed path
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana  # Persistent storage
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - anchorchain
    profiles:
      - local
      - testnet

volumes:
  anchor_data:
    driver: local
  grafana_data:
    driver: local

networks:
  anchorchain:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
